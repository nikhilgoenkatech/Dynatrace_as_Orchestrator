{"version":11,"variables":[{"key":"Current_build","type":"query","input":"fetch events,from:now()-30d, scanLimitGBytes: -1\n| filter event.type == \"CUSTOM_DEPLOYMENT\" and deployment.project == \"SRE-Guardian\"\n| summarize count(), by: {deployment.release_stage, deployment.version}\n| fields deployment.version\n| sort deployment.version, direction:\"descending\"\n","multiple":false},{"key":"Previous_build","type":"query","input":"fetch events,from:now()-30d, scanLimitGBytes: -1\n| filter event.type == \"CUSTOM_DEPLOYMENT\" and deployment.project == \"SRE-Guardian\"\n| summarize count(), by: {deployment.release_stage, deployment.version}\n| fields deployment.version\n| sort deployment.version, direction:\"descending\"","multiple":false},{"key":"BuildStage","type":"csv","input":"Staging,Production","multiple":false},{"key":"previous_build_relative_time","type":"csv","input":"-30d","multiple":false}],"tiles":{"1":{"type":"code","title":"Service Response Client","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.response.client:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"2":{"type":"code","title":"Service CPU Time","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.cpu.time:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"3":{"type":"code","title":"Service Response Time","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.response.time:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"4":{"type":"code","title":"Service Request Count","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.requestCount.total:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"5":{"type":"markdown","title":"","content":"---"},"6":{"type":"code","title":"Service Response Client","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.response.client:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"colorPalette":"apdex","seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"7":{"type":"code","title":"Service CPU Time","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.cpu.time:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Current_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"8":{"type":"code","title":"Service Response Client","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.response.time:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Current_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"9":{"type":"code","title":"Service Request Count","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.requestCount.total:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Current_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"10":{"type":"markdown","title":"","content":"---\n#### Service Golden signals for $BuildStage $Previous_build\n---"},"11":{"type":"markdown","title":"","content":"---\n#### Service Golden signals for $BuildStage $Current_build\n---\n"},"12":{"type":"markdown","title":"","content":"---\n#### DB Golden signals for $BuildStage $Previous_build\n---"},"13":{"type":"markdown","title":"","content":"---\n#### DB Golden signals for $BuildStage $Current_build\n---"},"14":{"type":"code","title":"Service CPU Time","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.cpu.time:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"15":{"type":"code","title":"Failed DB Connections","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.dbconnections.failure:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let randomValue = Math.floor(Math.random() * (30 - 1 + 1)) + 1;\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': randomValue,\n         });\n  }\n } \n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"recordView","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"16":{"type":"code","title":"Service Response Time","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.response.time:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"17":{"type":"code","title":"Service Request Count","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.requestCount.total:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"18":{"type":"code","title":"Service CPU Time","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.cpu.time:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Current_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"19":{"type":"code","title":"Service Response Client","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.response.client:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"recordView","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"20":{"type":"code","title":"Service Response Client","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.response.time:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Current_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"21":{"type":"code","title":"Service Request Count","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:service.requestCount.total:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Current_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"22":{"type":"markdown","title":"","content":"---\n#### Process Metrics for $BuildStage $Current_build\n---"},"23":{"type":"markdown","title":"","content":"---\n#### Technology Metrics for $BuildStage $Previous_build\n---"},"26":{"type":"code","title":"Node.js Resident Set Size","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:tech.nodejs.v8heap.rss:filter(and(or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n } \n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"27":{"type":"code","title":"Node.js GC Heap Used","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:tech.nodejs.v8heap.gcHeapUsed:filter(and(or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n } \n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"30":{"type":"code","title":"Node.js: Event loop latency","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:tech.nodejs.uvLoop.loopLatency:filter(and(or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n } \n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"31":{"type":"code","title":"Node.js Work processed latency","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:tech.nodejs.uvLoop.processedLatency:filter(and(or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n } \n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"32":{"type":"code","title":"Node.js Resident Set Size","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:tech.nodejs.v8heap.rss:filter(and(or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"BuildVersion:\" + String($Current_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n } \n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"33":{"type":"code","title":"Node.js GC Heap Used","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:tech.nodejs.v8heap.gcHeapUsed:filter(and(or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"BuildVersion:\" + String($Current_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n } \n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"34":{"type":"code","title":"Node.js: Event loop latency","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:tech.nodejs.uvLoop.loopLatency:filter(and(or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"BuildVersion:\" + String($Current_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n } \n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"35":{"type":"code","title":"Node.js Work processed latency","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:tech.nodejs.uvLoop.processedLatency:filter(and(or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"BuildVersion:\" + String($Current_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.process_group_instance\\\",entitySelector(\\\"type(process_group_instance),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n } \n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"36":{"type":"markdown","title":"","content":"---\n#### Synthetic Details for $BuildStage $Current_build\n---\n"},"37":{"type":"markdown","title":"","content":"---\n#### Synthetic details for $BuildStage $Previous_build\n---"},"40":{"type":"code","title":"Synthetic Load Time","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:synthetic.browser.actionDuration.load.geo:filter(and(or(in(\\\"dt.entity.synthetic_test\\\",entitySelector(\\\"type(synthetic_test),tag(~\\\"\"+ $BuildStage + \"-\" + $Previous_build + \"~\\\")\\\"))))):splitBy():sort(value(auto,descending)):limit(20)\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"barChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"enableLineWrap":true}}},"41":{"type":"code","title":"Synthetic Actions","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:billing.synthetic.actions:filter(and(or(in(\\\"dt.entity.synthetic_test\\\",entitySelector(\\\"type(synthetic_test),tag(~\\\"\"+ $BuildStage + \"-\" + $Previous_build + \"~\\\")\\\"))))):splitBy():sort(value(auto,descending)):limit(20)\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"barChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"44":{"type":"code","title":"Synthetic Load Action","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:synthetic.browser.responseEnd.load:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Previous_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"45":{"type":"code","title":"Visually Complete","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:synthetic.browser.visuallyComplete.load:filter(and(or(in(\\\"dt.entity.synthetic_test\\\",entitySelector(\\\"type(synthetic_test),tag(~\\\"\"+ $BuildStage + \"-\" + $Previous_build + \"~\\\")\\\"))))):splitBy():sort(value(auto,descending)):limit(20)\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"46":{"type":"code","title":"Synthetic Actions","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:billing.synthetic.actions:filter(and(or(in(\\\"dt.entity.synthetic_test\\\",entitySelector(\\\"type(synthetic_test),tag(~\\\"\"+ $BuildStage + \"-\" + $Current_build + \"~\\\")\\\"))))):splitBy():sort(value(auto,descending)):limit(20)\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"barChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"47":{"type":"code","title":"Service Load Time","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:synthetic.browser.actionDuration.load.geo:filter(and(or(in(\\\"dt.entity.synthetic_test\\\",entitySelector(\\\"type(synthetic_test),tag(~\\\"\"+ $BuildStage + \"-\" + $Current_build + \"~\\\")\\\"))))):splitBy():sort(value(auto,descending)):limit(20)\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"barChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"enableLineWrap":true}}},"48":{"type":"code","title":"Synthetic Load Action","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:synthetic.browser.responseEnd.load:filter(and(or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"BuildVersion:\" + String($Current_build) + \"~\\\")\\\"))),or(in(\\\"dt.entity.service\\\",entitySelector(\\\"type(service),tag(~\\\"Environment:\" + String($BuildStage) +\"~\\\")\\\"))))):splitBy():sort(value(auto,descending))\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}},"49":{"type":"code","title":"Visually Complete","input":"import { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nexport default async function () {\n  const metricSelectorString = \"builtin:synthetic.browser.visuallyComplete.load:filter(and(or(in(\\\"dt.entity.synthetic_test\\\",entitySelector(\\\"type(synthetic_test),tag(~\\\"\"+ $BuildStage + \"-\" + $Current_build + \"~\\\")\\\"))))):splitBy():sort(value(auto,descending)):limit(20)\";\n  const resp = await metricsClient.query({\n    metricSelector: metricSelectorString,\n    from: $previous_build_relative_time,\n    acceptType: \"application/json; charset=utf-8\",\n  });\nlet outarray = [];\n\nfor (let rate of resp.result[0].data) {\n  let i = 0;\n  for (let ts of rate.timestamps) {\n    i++;\n    let date = new Date(ts)\n    outarray.push({\n      'Timestamp': date,\n      'Value': rate.values[i],\n         });\n  }\n}\n  console.log(metricSelectorString);\n  return outarray;\n}","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"seriesOverrides":[{"seriesId":["Value"],"override":{"color":{"Default":"var(--dt-colors-charts-categorical-color-09-default, #0d9c29)","Hover":"var(--dt-colors-charts-categorical-color-09-hover, #0a7b20)","Active":"var(--dt-colors-charts-categorical-color-09-active, #075f19)","DefaultTransparent":"var(--dt-colors-charts-categorical-color-09-default-transparent, #008500cc)","HoverTransparent":"var(--dt-colors-charts-categorical-color-09-hover-transparent, #005905cc)","ActiveTransparent":"var(--dt-colors-charts-categorical-color-09-active-transparent, #003112cc)"}}}]},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[]}}}},"layouts":{"1":{"x":0,"y":2,"w":6,"h":5},"2":{"x":6,"y":2,"w":6,"h":5},"3":{"x":6,"y":7,"w":6,"h":5},"4":{"x":0,"y":7,"w":6,"h":5},"5":{"x":0,"y":12,"w":24,"h":1},"6":{"x":12,"y":2,"w":6,"h":5},"7":{"x":18,"y":2,"w":6,"h":5},"8":{"x":18,"y":7,"w":6,"h":5},"9":{"x":12,"y":7,"w":6,"h":5},"10":{"x":0,"y":0,"w":12,"h":2},"11":{"x":12,"y":0,"w":12,"h":2},"12":{"x":0,"y":13,"w":12,"h":2},"13":{"x":12,"y":13,"w":12,"h":2},"14":{"x":6,"y":15,"w":6,"h":5},"15":{"x":0,"y":15,"w":6,"h":5},"16":{"x":6,"y":20,"w":6,"h":5},"17":{"x":0,"y":20,"w":6,"h":5},"18":{"x":18,"y":15,"w":6,"h":5},"19":{"x":12,"y":15,"w":6,"h":5},"20":{"x":18,"y":20,"w":6,"h":5},"21":{"x":12,"y":20,"w":6,"h":5},"22":{"x":12,"y":25,"w":12,"h":2},"23":{"x":0,"y":25,"w":12,"h":2},"26":{"x":6,"y":27,"w":6,"h":5},"27":{"x":0,"y":27,"w":6,"h":5},"30":{"x":6,"y":32,"w":6,"h":5},"31":{"x":0,"y":32,"w":6,"h":5},"32":{"x":18,"y":27,"w":6,"h":5},"33":{"x":12,"y":27,"w":6,"h":5},"34":{"x":18,"y":32,"w":6,"h":5},"35":{"x":12,"y":32,"w":6,"h":5},"36":{"x":12,"y":37,"w":12,"h":2},"37":{"x":0,"y":37,"w":12,"h":2},"40":{"x":0,"y":39,"w":6,"h":5},"41":{"x":6,"y":39,"w":6,"h":5},"44":{"x":6,"y":44,"w":6,"h":5},"45":{"x":0,"y":44,"w":6,"h":5},"46":{"x":18,"y":39,"w":6,"h":5},"47":{"x":12,"y":39,"w":6,"h":5},"48":{"x":18,"y":44,"w":6,"h":5},"49":{"x":12,"y":44,"w":6,"h":5}}}