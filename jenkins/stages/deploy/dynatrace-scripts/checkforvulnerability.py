import sys
import json
import requests


def check_problem(DT_URL, DT_TOKEN, tag_info, risk_score):

   problem_count = 0
   securityProblemSelector = "pgTags(\"" + tag_info + "\"),minRiskScore(\"" + risk_score + "\")"

   endpoint = DT_URL + "/api/v2/securityProblems?securityProblemSelector=" + securityProblemSelector + "&from=now-5m" 
   get_param = {'Accept':'application/json; charset=utf-8', 'Authorization':'Api-Token {}'.format(DT_TOKEN)}
   
   print(endpoint)
   config_post = requests.get(endpoint, headers = get_param)
   jsonObj = json.loads(config_post.text)

   securityProblemsList = jsonObj["securityProblems"]

   for i in range(len(securityProblemsList)):
     if (securityProblemsList[i]["status"] == "OPEN"):
       problem_count = problem_count + 1

   print(problem_count)
   return problem_count, securityProblemsList

def davisSecurityAdvisor(DT_URL, DT_TOKEN, securityProblemsList):
    try:
       print("DavisSecurityAdvisor")  
       davisadvisor_endpoint = DT_URL + "/api/v2/davis/securityAdvices"
       get_param = {'Accept':'application/json; charset=utf-8', 'Authorization':'Api-Token {}'.format(DT_TOKEN)}

       print(davisadvisor_endpoint)
       result = requests.get(davisadvisor_endpoint, headers = get_param)
       print(result)
       jsonObj = json.loads(result.text)

       advise = jsonObj["advices"]
       security_dict={}
       for i in range(len(advise)):
           tmp_list = []
           tmp_dict = {}

           tmp_list.append(advise[i]["name"])
           tmp_list.append(advise[i]["technology"])
           tmp_list.append(advise[i]["adviceType"])

           if (len(advise[i]["critical"])) > 0:
             tmp_list.append("Critical")
           elif (len(advise[i]["high"])) > 0:
             tmp_list.append("High")
           elif (len(advise[i]["low"])) > 0:
             tmp_list.append("Low")
           elif (len(advise[i]["medium"])) > 0:
             tmp_list.append("Medium")

           security_dict[i + 1] = tmp_list
           print(security_dict[i + 1])
          
    except Exception(e):
       print("Recived exception ", str(e))
        
    finally:
       return security_dict

if __name__ == "__main__":
   fp = open("securityVulnerabilityReport.txt","w")

   DT_URL = sys.argv[1]
   DT_TOKEN = sys.argv[2]
   tag_info = sys.argv[3]
   risk_score = sys.argv[4]

   problem_count,securityProblemsList = check_problem(DT_URL, DT_TOKEN, tag_info, risk_score)
   msg = ""
   
   print(problem_count)
   if (problem_count <= 0):
       msg = "Looks clean. You can proceed with the build."
   else:
       print("Found problems: " + str(problem_count))
       print(securityProblemsList)
       security_dict = davisSecurityAdvisor(DT_URL, DT_TOKEN, securityProblemsList)
       msg = "Found the below vulnerabitilies. ABORT the build!!\n\n"
       msg = msg + "\n Vulnerable Severity\tLibrary\tTechnology Impacted\tAdvise to mitigate the vulnerability\n"
       for key in security_dict.keys():
          msg = msg + security_dict[key][3] + "\t" + security_dict[key][0]+ "\t" + security_dict[key][1] + "\t" + security_dict[key][2] + "\n"

   fp.write(msg)
   fp.close()

   if problem_count != 0:
     sys.exit(1)

   else:
     sys.exit(0)
